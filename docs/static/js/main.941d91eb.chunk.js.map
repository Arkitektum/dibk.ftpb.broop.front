{"version":3,"sources":["components/template/Container.module.scss","constants/types.js","reducers/NameReducer.js","reducers/SelectedFormReducer.js","reducers/index.js","utils/configureStore.js","components/template/Container.js","components/routes/Home.js","components/routes/Forms/FormType/Form.js","actions/FormActions.js","components/routes/NotFound.js","components/partials/MainNavigationBar.js","App.js","serviceWorker.js","components/config.js","components/ConfigLoader.js","index.js"],"names":["module","exports","UPDATE_NAME","FETCH_FORM","reducer","state","action","type","payload","initialState","reducers","history","combineReducers","router","connectRouter","name","NameReducer","selectedForm","SelectedFormReducer","createBrowserHistory","composeEnhancers","composeWithDevTools","ContentContainer","className","style","container","this","props","children","Component","connect","Home","handleInputChange","bind","value","updateName","Container","to","content","Form","form","formId","match","params","formType","fetchForm","then","response","setState","mapDispatchToProps","dispatch","apiUrl","fetch","res","json","NotFound","MainNavigationBar","logoLink","WebFont","load","google","families","store","preloadedState","middleware","thunk","createStore","createRootReducer","applyMiddleware","routerMiddleware","configureStore","App","basename","exact","path","render","Boolean","window","location","hostname","config","ConfigLoader","isLoaded","process","result","newconfig","prop","ready","loading","Main","ReactDOM","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.941d91eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__dTOM0\"};","export const FETCH_COMMITS = 'FETCH_COMMITS';\nexport const UPDATE_NAME = 'UPDATE_NAME';\nexport const FETCH_FORM = 'FETCH_FORM';\n","import { UPDATE_NAME } from 'constants/types';\n\nconst initialState = '';\n\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase UPDATE_NAME:\n\t\t\treturn action.payload;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer;\n","import { FETCH_FORM } from 'constants/types';\n\nconst initialState = {};\n\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase FETCH_FORM:\n\t\t\treturn action.payload;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer;\n","// Dependencies\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\n// Reducers\nimport NameReducer from 'reducers/NameReducer';\nimport SelectedFormReducer from 'reducers/SelectedFormReducer';\n\nconst reducers = history => combineReducers({\n  router: connectRouter(history),\n  name: NameReducer,\n  selectedForm: SelectedFormReducer\n});\n\nexport default reducers;\n","// Dependencies\nimport {createBrowserHistory} from 'history';\nimport {routerMiddleware} from 'connected-react-router';\nimport {createStore, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\n// Reducers\nimport createRootReducer from 'reducers';\n\n\nexport const history = createBrowserHistory()\n\nconst composeEnhancers = composeWithDevTools({\n  // options like actionSanitizer, stateSanitizer\n});\n\nexport default function configureStore(preloadedState) {\n  const middleware = [thunk];\n  const history = createBrowserHistory();\n  const store = createStore(\n\t\tcreateRootReducer(history),\n\t\tpreloadedState,\n\t\tcomposeEnhancers(\n\t\t\tapplyMiddleware(\n\t\t\t\t...middleware,\n\t\t\t\trouterMiddleware(history)\n\t\t\t)\n\t\t)\n\t);\n  return store;\n}\n","// Dependencies\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\n// Stylesheets\nimport style from 'components/template/Container.module.scss';\n\nclass ContentContainer extends Component {\n\n  render() {\n    return (<div className={style.container}>\n      {this.props.children}\n    </div>)\n  }\n}\n\nexport default connect(null, null)(ContentContainer);\n","// Dependencies\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\n\n// DIBK Design\nimport { Button } from 'dibk-design';\n\n// Template\nimport Container from 'components/template/Container';\n\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(value) {\n    this.props.updateName(value);\n  }\n  render() {\n    return (<Container>\n      <h1>Home</h1>\n      <Link to=\"/Skjema/Ansvarsrett/3/\">\n        <Button content=\"Eksempelskjema\"></Button>\n      </Link>\n    </Container>)\n  }\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","// Dependencies\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// Template\nimport Container from 'components/template/Container';\n\n// Actions\nimport { fetchForm } from 'actions/FormActions';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            form: null\n        }\n    }\n\n    componentDidMount() {\n        const formId = this.props.match.params.formId;\n        const formType = this.props.match.params.formType;\n        this.props.fetchForm(formType, formId).then((response) => {\n            const form = response?.payload || null;\n            this.setState({ form });\n        });\n    }\n\n\n    render() {\n        const formId = this.props.match.params.formId;\n        const formType = this.props.match.params.formType;\n        const form = this.state.form;\n        return form \n        ? (\n        <Container>\n            <h1>{formType}</h1>\n            Skjema med id: {formId}\n        </Container>)\n        : (\n        <Container>\n            <p>Henter skjema</p>\n        </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n});\n\nconst mapDispatchToProps = {\n    fetchForm\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\n\n","import { FETCH_FORM } from 'constants/types';\n\nexport const fetchForm = (formType, formId) => dispatch => {\n    const apiUrl = `https://dibk-ftpb-broop-api.azurewebsites.net/api/${formType}?formId=${formId}`\n    return fetch(apiUrl).then(res => res.json()).then(form => {\n        return dispatch({ type: FETCH_FORM, payload: form })\n    });\n}\n","// Dependencies\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\n// Template\nimport Container from 'components/template/Container';\n\nclass NotFound extends Component {\n\n  render() {\n    return (<Container>\n      <h1>404</h1>\n      <p>Siden finnes ikke</p>\n    </Container>)\n  }\n}\n\nexport default connect(null, null)(NotFound);\n","// Dependencies\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// DIBK Design\nimport { NavigationBar } from 'dibk-design';\n\n\nclass MainNavigationBar extends Component {\n\n  render() {\n    return (<NavigationBar logoLink=\"/\" />)\n  }\n}\n\nexport default connect(null, null)(MainNavigationBar);\n","// Dependecies\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport WebFont from 'webfontloader';\n\n// Utils\nimport configureStore, { history } from 'utils/configureStore';\n\n// Routes\nimport Home from 'components/routes/Home';\nimport Form from 'components/routes/Forms/FormType/Form';\nimport NotFound from 'components/routes/NotFound';\n\n// Partials\nimport MainNavigationBar from 'components/partials/MainNavigationBar';\n\nWebFont.load({\n  google: {\n    families: ['Roboto:400,700&display=swap']\n  }\n});\n\nconst initialState = {};\nconst store = configureStore(initialState);\n\nclass App extends Component {\n  render() {\n    return (<Provider store={store}>\n      <ConnectedRouter history={history}>\n        <BrowserRouter basename=\"/dibk.ftpb.broop.front\">\n          <MainNavigationBar />\n          <Switch>\n            <Route exact={true} path=\"/skjema/:formType/:formId\" render={(props) => (<Form {...props} />)} />\n            <Route exact={true} path=\"/\" render={(props) => (<Home {...props} />)} />\n            <Route render={() => (<NotFound />)} />\n          </Switch>\n        </BrowserRouter>\n      </ConnectedRouter>\n    </Provider>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const config = {};\nexport default config;\n\nfunction load() {\n    return fetch(`${process.env.PUBLIC_URL || ''}/config.json`)\n    .then(result => result.json())\n    .then((newconfig) => {\n        for(let prop in config) {\n            delete config[prop]\n        }\n        for(let prop in newconfig) {\n            config[prop] = newconfig[prop]\n        }\n        return config;\n    });\n}\nexport {load}","import { Component } from 'react';\nimport {load} from \"components/config\";\n\nexport default class ConfigLoader extends Component {\n    constructor(props){\n        super(props);\n        this.state = {isLoaded: false};\n    }\n\n\n  componentDidMount() {\n     // Once the configuration is loaded set `isLoaded` to true so we know to render our component\n     load().then(config =>  this.setState({isLoaded: true, config}));\n  }\n\n  render() {      \n    // If we haven't yet loaded the config, show either a \"splash\" component provided via a `loading` props or return nothing.\n    if(!this.state.isLoaded) {\n        return this.props.loading ? this.props.loading() : null;\n    }\n\n    // The config is loaded so show the component set on the `ready()` props\n    return this.props.ready(this.state.config);\n  }\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.scss';\nimport App from 'App';\nimport * as serviceWorker from './serviceWorker';\nimport ConfigLoader from 'components/ConfigLoader';\n\nclass Main extends Component {\n    render() {\n        return <ConfigLoader ready={() => <App />} />;\n    }\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}