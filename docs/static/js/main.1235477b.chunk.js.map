{"version":3,"sources":["components/partials/CommitsList/CommitsListElement.module.scss","components/partials/NavigationBar.module.scss","components/template/Container.module.scss","constants/types.js","reducers/CommitsReducer.js","reducers/NameReducer.js","reducers/index.js","utils/configureStore.js","components/template/Container.js","components/routes/Home.js","actions/NameActions.js","components/partials/CommitsList/CommitsListElement.js","components/partials/CommitsList.js","actions/CommitActions.js","components/routes/Commits.js","components/routes/NotFound.js","components/partials/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FETCH_COMMITS","UPDATE_NAME","initialState","reducer","state","action","type","payload","reducers","history","combineReducers","router","connectRouter","commits","CommitsReducer","name","NameReducer","createBrowserHistory","composeEnhancers","composeWithDevTools","ContentContainer","className","style","container","this","props","children","Component","connect","Home","handleInputChange","bind","value","updateName","Container","htmlFor","id","onChange","event","target","length","mapDispatchToProps","dispatch","getState","CommitsListElement","commit","commitsListElement","avatar","href","author","html_url","src","avatar_url","authorAvatar","alt","text","message","authorName","CommitsList","waitingForCommitsResponse","fetchCommits","owner","repo","then","setState","map","sha","commitsForRepo","commitsList","renderCommitsListElements","apiUrl","fetch","res","json","newCommits","Commits","commitsElements","NotFound","NavigationBar","navigationBar","appName","links","link","to","exact","activeClassName","activeLink","WebFont","load","google","families","store","preloadedState","middleware","thunk","createStore","createRootReducer","applyMiddleware","routerMiddleware","configureStore","App","basename","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1235477b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"commitsListElement\":\"CommitsListElement_commitsListElement__1jCLa\",\"avatar\":\"CommitsListElement_avatar__2blBc\",\"text\":\"CommitsListElement_text__2Sp5G\",\"message\":\"CommitsListElement_message__C7FaU\",\"authorName\":\"CommitsListElement_authorName__1lSwj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigationBar\":\"NavigationBar_navigationBar__aJZ24\",\"appName\":\"NavigationBar_appName__1SLH3\",\"links\":\"NavigationBar_links__3k3lj\",\"link\":\"NavigationBar_link__m8aPT\",\"activeLink\":\"NavigationBar_activeLink__zIBLb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__dTOM0\"};","export const FETCH_COMMITS = 'FETCH_COMMITS';\nexport const UPDATE_NAME = 'UPDATE_NAME';\n","import { FETCH_COMMITS } from 'constants/types';\n\nconst initialState = {};\n\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase FETCH_COMMITS:\n\t\t\treturn action.payload;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer;\n","import { UPDATE_NAME } from 'constants/types';\n\nconst initialState = '';\n\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase UPDATE_NAME:\n\t\t\treturn action.payload;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer;\n","// Dependencies\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\n// Reducers\nimport CommitsReducer from 'reducers/CommitsReducer';\nimport NameReducer from 'reducers/NameReducer';\n\nconst reducers = history => combineReducers({\n  router: connectRouter(history),\n  commits: CommitsReducer,\n  name: NameReducer\n});\n\nexport default reducers;\n","// Dependencies\nimport {createBrowserHistory} from 'history';\nimport {routerMiddleware} from 'connected-react-router';\nimport {createStore, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\n// Reducers\nimport createRootReducer from 'reducers';\n\n\nexport const history = createBrowserHistory()\n\nconst composeEnhancers = composeWithDevTools({\n  // options like actionSanitizer, stateSanitizer\n});\n\nexport default function configureStore(preloadedState) {\n  const middleware = [thunk];\n  const history = createBrowserHistory();\n  const store = createStore(\n\t\tcreateRootReducer(history),\n\t\tpreloadedState,\n\t\tcomposeEnhancers(\n\t\t\tapplyMiddleware(\n\t\t\t\t...middleware,\n\t\t\t\trouterMiddleware(history)\n\t\t\t)\n\t\t)\n\t);\n  return store;\n}\n","// Dependencies\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\n// Stylesheets\nimport style from 'components/template/Container.module.scss';\n\nclass ContentContainer extends Component {\n\n  render() {\n    return (<div className={style.container}>\n      {this.props.children}\n    </div>)\n  }\n}\n\nexport default connect(null, null)(ContentContainer);\n","// Dependencies\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateName } from 'actions/NameActions';\n\n// Template\nimport Container from 'components/template/Container';\n\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(value) {\n    this.props.updateName(value);\n  }\n  render() {\n    return (<Container>\n      <h1>Home</h1>\n      <label htmlFor=\"name-field\">Your name: </label>\n      <input value={this.props.name} id=\"name-field\" onChange={(event) => this.handleInputChange(event.target.value)} />\n      <p>{\n        this.props.name && this.props.name.length\n          ? `Hello ${this.props.name} 😃`\n          : ''\n      }</p>\n    </Container>)\n  }\n}\n\nconst mapStateToProps = state => ({ name: state.name });\n\nconst mapDispatchToProps = {\n  updateName\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import {UPDATE_NAME} from 'constants/types';\n\nexport const updateName = name => (dispatch, getState) => {\n  dispatch({type: UPDATE_NAME, payload: name})\n}\n","// Dependencies\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// Stylesheets\nimport style from 'components/partials/CommitsList/CommitsListElement.module.scss';\n\nclass CommitsListElement extends Component {\n\n  render() {\n    const commit = this.props.commit;\n    return this.props.commit\n      ? (<div className={style.commitsListElement}>\n        <div className={style.avatar}>\n          <a href={commit.author.html_url} className={style.author}>\n            <img src={commit.author.avatar_url} className={style.authorAvatar} alt={`Avatar for ${this.props.commit.commit.author.name}`}/>\n          </a>\n        </div>\n        <div className={style.text}>\n          <a href={commit.html_url} className={style.message}>{commit.commit.message}</a>\n          <a href={commit.author.html_url} className={style.authorName}>{this.props.commit.commit.author.name}</a>\n        </div>\n      </div>)\n      : '';\n  }\n}\n\nCommitsListElement.propTypes = {\n  commit: PropTypes.object.isRequired\n};\n\nexport default connect(null, null)(CommitsListElement);\n","// Dependencies\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// Components\nimport CommitsListElement from 'components/partials/CommitsList/CommitsListElement';\n\n// Actions\nimport {fetchCommits} from 'actions/CommitActions';\n\n// Stylesheets\nimport style from 'components/partials/CommitsList.module.scss';\n\nclass CommitsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      waitingForCommitsResponse: true\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchCommits(this.props.owner, this.props.repo).then(() => {\n      this.setState({waitingForCommitsResponse: false})\n    });\n  }\n\n  renderCommitsListElements(commits) {\n    return commits && commits.length\n      ? commits.map(commit => {\n        return <CommitsListElement key={commit.sha} commit={commit} />\n      })\n      : '';\n  }\n\n  render() {\n    const commitsForRepo = !this.state.waitingForCommitsResponse && this.props.commits && this.props.commits[this.props.owner] && this.props.commits[this.props.owner][this.props.repo]\n      ? this.props.commits[this.props.owner][this.props.repo]\n      : null;\n    return commitsForRepo\n      ? (<div className={style.commitsList}>\n        {this.renderCommitsListElements(commitsForRepo)}\n      </div>)\n      : '';\n  }\n}\n\nCommitsList.propTypes = {\n  owner: PropTypes.string.isRequired,\n  repo: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({commits: state.commits});\n\nconst mapDispatchToProps = {\n  fetchCommits\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommitsList);\n","import {FETCH_COMMITS} from 'constants/types';\n\nexport const fetchCommits = (owner, repo) => (dispatch, getState) => {\n  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/commits`;\n  let commits = getState().commits;\n  if (!commits[owner]) {\n    commits[owner] = {};\n  }\n  return fetch(apiUrl).then(res => res.json()).then(newCommits => {\n    commits[owner][repo] = newCommits;\n    dispatch({type: FETCH_COMMITS, payload: commits})\n  });\n}\n","// Dependencies\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\n// Components\nimport CommitsList from 'components/partials/CommitsList';\n\n// Template\nimport Container from 'components/template/Container';\n\nclass Commits extends Component {\n  renderCommitsList(commits) {\n    const commitsElements = commits && commits.length\n      ? commits.map(commit => {\n        return (<div key={commit.sha}>{commit.commit.message}</div>)\n      })\n      : null;\n    return commitsElements\n      ? commitsElements\n      : '';\n  }\n\n  render() {\n    return (<Container>\n      <h1>Commits</h1>\n      <CommitsList owner='benjamindehli' repo='react-redux-boilerplate'/>\n    </Container>)\n  }\n}\n\nexport default connect(null, null)(Commits);\n","// Dependencies\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\n// Template\nimport Container from 'components/template/Container';\n\nclass NotFound extends Component {\n\n  render() {\n    return (<Container>\n      <h1>404</h1>\n      <p>Siden finnes ikke</p>\n    </Container>)\n  }\n}\n\nexport default connect(null, null)(NotFound);\n","// Dependencies\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {NavLink} from 'react-router-dom';\n\n// Stylesheets\nimport style from 'components/partials/NavigationBar.module.scss';\n\nclass NavigationBar extends Component {\n\n  render() {\n    return (<nav className={style.navigationBar}>\n      <span className={style.appName}>React Redux Boilerplate</span>\n      <ul className={style.links}>\n        <li className={style.link}>\n          <NavLink to='/' exact={true} activeClassName={style.activeLink}>Home</NavLink>\n        </li>\n        <li className={style.link}>\n          <NavLink to='/commits' activeClassName={style.activeLink}>Commits</NavLink>\n        </li>\n      </ul>\n    </nav>)\n  }\n}\n\nexport default connect(null, null)(NavigationBar);\n","// Dependecies\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport WebFont from 'webfontloader';\n\n// Utils\nimport configureStore, { history } from 'utils/configureStore';\n\n// Routes\nimport Home from 'components/routes/Home';\nimport Commits from 'components/routes/Commits';\nimport NotFound from 'components/routes/NotFound';\n\n// Partials\nimport NavigationBar from 'components/partials/NavigationBar';\n\nWebFont.load({\n  google: {\n    families: ['Roboto:400,700&display=swap']\n  }\n});\n\nconst initialState = {};\nconst store = configureStore(initialState);\n\nclass App extends Component {\n  render() {\n    return (<Provider store={store}>\n      <ConnectedRouter history={history}>\n        <BrowserRouter basename=\"/dibk.ftpb.broop.front\">\n          <NavigationBar />\n          <Switch>\n            <Route exact={true} path=\"/commits/:commitId\" render={(props) => (<Commits {...props} />)} />\n            <Route exact={true} path=\"/commits\" render={(props) => (<Commits {...props} />)} />\n            <Route exact={true} path=\"/\" render={(props) => (<Home {...props} />)} />\n            <Route render={() => (<NotFound />)} />\n          </Switch>\n        </BrowserRouter>\n      </ConnectedRouter>\n    </Provider>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.scss';\nimport App from 'App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}